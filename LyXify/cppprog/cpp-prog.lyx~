#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Singapore}
\usefonttheme[onlymath]{serif}
% or ...
\usepackage{ctex}
\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "线性代数复习(一)"
\pdf_author "gwzhang"
\pdf_subject "数学"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "showlines=true,showstringspaces=false,basicstyle={\ttfamily\tiny},numbersep=5pt,tabsize=4"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Standard C++ Programming
\end_layout

\begin_layout Author
AUGPath
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\R}{\mathbb{R}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\red}[1]{\textcolor{red}{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\green}[1]{{\color{green}#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\al}{\alpha}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\bt}{\beta}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\huaa}{\mathscr{A}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\la}{\lambda}
\end_inset


\end_layout

\begin_layout Section
Types and structs
\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Recall basic syntaxes
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

 std::cout << "Hello, world!" << std::endl;
\end_layout

\begin_layout Plain Layout

 return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{std}$
\end_inset

 for the namespace
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fundamental types
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <string>
\end_layout

\begin_layout Plain Layout

int val = 5; //32 bits (usually)
\end_layout

\begin_layout Plain Layout

char ch = 'F'; //8 bits (usually)
\end_layout

\begin_layout Plain Layout

float decimalVal1 = 5.0; //32 bits (usually)
\end_layout

\begin_layout Plain Layout

double decimalVal2 = 5.0; //64 bits (usually)
\end_layout

\begin_layout Plain Layout

bool bVal = true; //1 bit
\end_layout

\begin_layout Plain Layout

std::string str = "Haven";
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Statically typed: everything with a name (variables, functions, etc) is
 given a type before runtime.
\end_layout

\end_deeper
\begin_layout Frame
Problems so far
\end_layout

\begin_deeper
\begin_layout Itemize
a pain to know what the type of a variable is 
\end_layout

\begin_deeper
\begin_layout Overprint
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

2
\end_layout

\end_inset

(use 
\begin_inset Formula $\texttt{auto}$
\end_inset

 that tells the compiler to deduce the type)
\end_layout

\end_deeper
\begin_layout Itemize
any given function can only have exactly one return type
\end_layout

\begin_layout Itemize
C++ primitives (and even the types in the STL) can be limited
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Using struct
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Struct: a a group of 
\series bold
named variables
\series default
, each with their own type, that allows programmers to 
\series bold
bundle different types
\series default
 together!
\end_layout

\begin_layout Itemize
\begin_inset Formula $\texttt{std::pair}$
\end_inset

.
 A STL built-in struct with two fields of any type.
\end_layout

\begin_deeper
\begin_layout Itemize
init: 
\begin_inset Formula $\texttt{std::pair<first\_type, second\_type>}$
\end_inset


\end_layout

\begin_layout Itemize
access with 
\begin_inset Formula $\texttt{.first}$
\end_inset

 and 
\begin_inset Formula $\texttt{.second}$
\end_inset


\end_layout

\begin_layout Itemize
use 
\begin_inset Formula $\texttt{make\_pair(first, second)}$
\end_inset

to make pair
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Initialization and References
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Initialization
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Definition(from CPPref): Provides initial values at the time of construction.
\end_layout

\begin_layout Itemize
How?
\end_layout

\begin_deeper
\begin_layout Itemize
Direct initialization
\end_layout

\begin_layout Itemize
Uniform initialization
\end_layout

\begin_layout Itemize
Structured Binding
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Way I: Direct initialization
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

    int n1 = 12.0;
\end_layout

\begin_layout Plain Layout

    int n2(12.5);
\end_layout

\begin_layout Plain Layout

    std::cout<<n1<<n2<<std::endl;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Both n1 and n2 will be 12(int).
 
\begin_inset Formula $\Rightarrow$
\end_inset

narrowing conversion
\end_layout

\begin_deeper
\begin_layout Itemize
float(double) is able to convert to int easily
\end_layout

\end_deeper
\begin_layout Itemize
Narrowing conversion happens when
\end_layout

\begin_deeper
\begin_layout Itemize
from a floating-point type to an integer type
\end_layout

\begin_layout Itemize
bigger fundamental types to smaller fundamental types
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Way II: Uniform initialization (C++11)
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

    int n1{12.0};
\end_layout

\begin_layout Plain Layout

    int n2{12.5};
\end_layout

\begin_layout Plain Layout

    std::cout<<n1<<n2<<std::endl;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
With uniform initialization C++ does care about types!
\end_layout

\begin_deeper
\begin_layout Itemize
result in compilation failure
\end_layout

\end_deeper
\begin_layout Itemize
Change 12.0 and 12.5 to 12 will result the desired(?) result.
 
\end_layout

\begin_layout Itemize
It's good because 
\end_layout

\begin_deeper
\begin_layout Enumerate
It’s safe! It doesn’t allow for narrowing conversions
\end_layout

\begin_layout Enumerate
It’s ubiquitous it works for all types like vectors, maps, and custom classes,
 among other things! 
\begin_inset Formula $\triangleright$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Way II: Uniform initialization (C++11)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Works with std::map, std::vector and all other stuff!
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct Student{
\end_layout

\begin_layout Plain Layout

    string name;
\end_layout

\begin_layout Plain Layout

    int age;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

    std::map<std::string, int> ages{
\end_layout

\begin_layout Plain Layout

        {
\begin_inset Quotes eld
\end_inset

AUGPath
\begin_inset Quotes erd
\end_inset

, 20},
\end_layout

\begin_layout Plain Layout

        {
\begin_inset Quotes eld
\end_inset

Matheart
\begin_inset Quotes erd
\end_inset

, 21},
\end_layout

\begin_layout Plain Layout

        {
\begin_inset Quotes eld
\end_inset

BLUESKY007
\begin_inset Quotes erd
\end_inset

, 22}
\end_layout

\begin_layout Plain Layout

    };
\end_layout

\begin_layout Plain Layout

    std::vector<int> numbers{1,2,3,4,5};
\end_layout

\begin_layout Plain Layout

    std::cout<<ages[
\begin_inset Quotes eld
\end_inset

BLUESKY007
\begin_inset Quotes erd
\end_inset

];
\end_layout

\begin_layout Plain Layout

    Student s{
\begin_inset Quotes eld
\end_inset

thapgua
\begin_inset Quotes erd
\end_inset

, 20};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Way III: Structured Binding (C++ 17)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A useful way to initialize some variables from data structures with fixed
 sizes at compile time
\end_layout

\begin_layout Itemize
Ability to access multiple values returned by a function
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

#include <tuple>
\end_layout

\begin_layout Plain Layout

#include <string>
\end_layout

\begin_layout Plain Layout

std::tuple<std::string, std::string, std::string> getclassInfo() {
\end_layout

\begin_layout Plain Layout

    std::string className = "CS106L";
\end_layout

\begin_layout Plain Layout

    std::string buildingName = "Turing Auditorium";
\end_layout

\begin_layout Plain Layout

    std::string language = "C++";
\end_layout

\begin_layout Plain Layout

    return {className, buildingName, language};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

    auto classinfo = getclassinfo();
\end_layout

\begin_layout Plain Layout

    std::string className = std:: get<0>(classInfo);
\end_layout

\begin_layout Plain Layout

    std::string buildingName = std::get<1>(classInfo);
\end_layout

\begin_layout Plain Layout

    std::string language = std::get<2>(classInfo);
\end_layout

\begin_layout Plain Layout

    // is equivalent to 
\end_layout

\begin_layout Plain Layout

    auto [className, buildingName, language] = getClassInfo();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Definition: a reference is an alias to an already-existing thing by using
 &
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int num = 5;
\end_layout

\begin_layout Plain Layout

int &ref = num;
\end_layout

\begin_layout Plain Layout

ref = 10;  // assign new value through the reference
\end_layout

\begin_layout Plain Layout

std::cout<<num<<std::endl; // number is now 10
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ref is a variable of type int&, that is an alias to num
\end_layout

\begin_layout Itemize
In function: Can also pass arguments by reference
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void add1(int &n){
\end_layout

\begin_layout Plain Layout

    n++;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

    int num = 2;
\end_layout

\begin_layout Plain Layout

    add1(num);
\end_layout

\begin_layout Plain Layout

    std::cout<<num<<std::endl; // num is 3
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Formula $\triangleright$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Reference in structured binding
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void shift(std::vector<std::pair<int, int>> &nums){
\end_layout

\begin_layout Plain Layout

  for(auto [num1, num2]:nums){
\end_layout

\begin_layout Plain Layout

    num1++;
\end_layout

\begin_layout Plain Layout

    num2++;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Will num1 and num2 increment by 1? 
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
No!
\end_layout

\begin_layout Itemize
We’re not modifying num1 and num2 in this function!
\end_layout

\begin_layout Itemize
We are modifying the std::pair’s inside of nums
\end_layout

\begin_layout Itemize
num1 and num2 : only a copy of the value
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void shift(std::vector<std::pair<int, int>> &nums){
\end_layout

\begin_layout Plain Layout

  for(auto &[num1, num2]:nums){
\end_layout

\begin_layout Plain Layout

    num1++;
\end_layout

\begin_layout Plain Layout

    num2++;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
l-values and r-values
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
What can we refer? 
\begin_inset Formula $\texttt{int \&x = 2;}$
\end_inset

?
\end_layout

\end_deeper
\begin_layout Frame
L-values and R-values
\end_layout

\begin_deeper
\begin_layout Itemize
An l-value can be to the left or the right of an equal sign
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{int y=\red x; \red x=344;}$
\end_inset

, both sides are OK.
\end_layout

\end_deeper
\begin_layout Itemize
An r-value can be 
\series bold
ONLY
\series default
 to the right of an equal sign!
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{int y=\red{21};}$
\end_inset

 but NOT 
\begin_inset Formula $\texttt{21=x}$
\end_inset

.
\end_layout

\begin_layout Itemize
r-values are temporary.
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame
Is 
\begin_inset Formula $\texttt{int\& num}$
\end_inset

 a l-value?
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Yes
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void add1(int &n){
\end_layout

\begin_layout Plain Layout

    n++;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

    add1(2);
\end_layout

\begin_layout Plain Layout

    std::cout<<num<<std::endl; // Compile error
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
const operator
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Defn: A qualifier for objects that declares they cannot be modified
\end_layout

\begin_layout Itemize
Quiz: Can we apply 
\begin_inset Formula $\texttt{push\_back}$
\end_inset

 for these?
\end_layout

\begin_deeper
\begin_layout Itemize
A normal vector: 
\begin_inset Formula $\texttt{std::vector<int> vec\{1,2,3\};}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{Yes!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A const vector: 
\begin_inset Formula $\texttt{const std::vector<int> const\_vec\{1,2,3\};}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{Nope!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A ref to vec: 
\begin_inset Formula $\texttt{std::vector<int>\& ref\_vec\{vec\};}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{Yes!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A const reference: 
\begin_inset Formula $\texttt{const std::vector<int>\& ref\_vec\{vec\};}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onslide<2->{Nope!, const reference, CE}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
You can’t declare a non-const reference to a const variable
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const std:: vector<int> const_vec {1,2,3}; // a const vector! 
\end_layout

\begin_layout Plain Layout

const std::vector<int> const_ref_vec{ const_vec } ;  // Good!
\end_layout

\begin_layout Plain Layout

//  ^
\end_layout

\begin_layout Plain Layout

//  + Note that the reference must be const! 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Streams
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Background
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Designing and implementing a general input/output facility for a programming
 language
\end_layout

\begin_layout Itemize
C program: using printf (Aside: Do you know how printf implements?)
\end_layout

\end_deeper
\begin_layout Frame
Stream is a general input/output abstraction facility for C++
\end_layout

\begin_deeper
\begin_layout Itemize
reading data
\end_layout

\begin_layout Itemize
writing data
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/ios.png
	width 40page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Basic iostream
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
stream 
\begin_inset Formula $\texttt{std::cout}$
\end_inset

 and 
\begin_inset Formula $\texttt{std::cin}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{std::cout}$
\end_inset

 is a stream
\end_layout

\begin_deeper
\begin_layout Itemize
The std::cout stream is an instance of std::ostream which represents the
 standard output stream! 
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $\texttt{std::cin}$
\end_inset

 is the console input stream!
\end_layout

\begin_deeper
\begin_layout Itemize
The std::cin stream is an instance of std::istream which represents the
 standard input stream!
\end_layout

\begin_layout Itemize
then it is converted by type
\end_layout

\end_deeper
\begin_layout Itemize
Generalizing the stream
\end_layout

\begin_deeper
\begin_layout Itemize
read from external source
\end_layout

\begin_layout Itemize
then get the string representation in the stream
\end_layout

\begin_layout Itemize
finally type conversion to your program
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/genstream.png
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Generalizing streams
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
General streams
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Input streams
\end_layout

\begin_deeper
\begin_layout Itemize
a way to read data from a source
\end_layout

\begin_deeper
\begin_layout Itemize
Are inherited from std::istream
\end_layout

\begin_layout Itemize
ex.
 reading in something from the console (std::cin)
\end_layout

\begin_layout Itemize
primary operator: >> (called the extraction operator)
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame
Output streams
\end_layout

\begin_deeper
\begin_layout Itemize
a way to write data to a destination
\end_layout

\begin_deeper
\begin_layout Itemize
Are inherited from std::ostream
\end_layout

\begin_layout Itemize
ex.
 writing out something to the console (std::cout)
\end_layout

\begin_layout Itemize
primary operator: << (called the insertion operator)
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Formula $\texttt{std::stringstream}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
What 
\end_layout

\begin_deeper
\begin_layout Itemize
a way to treat strings as streams
\end_layout

\end_deeper
\begin_layout Itemize
Utility
\end_layout

\begin_deeper
\begin_layout Itemize
stringstreams are useful for use-cases that deal with mixing data types
\end_layout

\end_deeper
\end_deeper
\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/gabs.png
	width 50page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Relation between stringstream and iostream
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
String stream example
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

  /// partial Bjarne Quote
\end_layout

\begin_layout Plain Layout

  std::string initial_quote = “Bjarne Stroustrup C makes it easy to shoot
\end_layout

\begin_layout Plain Layout

                     yourself in the foot”;
\end_layout

\begin_layout Plain Layout

  /// create a stringstream
\end_layout

\begin_layout Plain Layout

  std::stringstream ss(initial_quote);
\end_layout

\begin_layout Plain Layout

  /// data destinations
\end_layout

\begin_layout Plain Layout

  std::string first;
\end_layout

\begin_layout Plain Layout

  std::string last;
\end_layout

\begin_layout Plain Layout

  std::string language, extracted_quote;
\end_layout

\begin_layout Plain Layout

  ss >> first >> last >> language >> extracted_quote; 
\end_layout

\begin_layout Plain Layout

  std::cout << first << “ ” << last << “ said this: ”<< language << “ “
 <<
\end_layout

\begin_layout Plain Layout

  extracted_quote << std::endl;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
initialize stringstream with string constructor
\end_layout

\begin_deeper
\begin_layout Itemize
or 
\begin_inset Formula $\texttt{ss << initial\_quote;}$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Streams move data from one place to another
\end_layout

\begin_layout Itemize
The >> operator only reads until the next whitespace!
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Formula $\texttt{getline}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Frame
Use getline instead! 
\end_layout

\begin_deeper
\begin_layout Itemize
getline() reads an input stream, is, up until the delim char and stores
 it in some buffer, str.
\end_layout

\begin_layout Itemize
The delim char is by default ‘
\backslash
n’.
\end_layout

\begin_layout Itemize
Note that: 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
getline() 
\series bold
consumes
\series default
 the delim character!
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Buffer in output system 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
std::cout stream is line-buffered
\end_layout

\begin_layout Itemize
contents in buffer not shown on external source until an explicit flush
 occurs!
\end_layout

\end_deeper
\begin_layout Frame
Behaviors triggers flush
\end_layout

\begin_deeper
\begin_layout Itemize
std::endl
\end_layout

\begin_layout Itemize
std::flush
\end_layout

\end_deeper
\begin_layout Frame
When debugging, better to flush
\end_layout

\begin_deeper
\begin_layout Itemize
no flush = some characters in buffer can not be printed when crashing.
 
\end_layout

\end_deeper
\begin_layout Frame
But cerr has no buffering, while clog has buffering.
 
\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame
Aside: in OI, why is std::ios::sync_with_stdio(false)?
\end_layout

\begin_deeper
\begin_layout Itemize
before: 
\backslash
n will cause flush
\end_layout

\begin_layout Itemize
after: 
\backslash
n will not flush
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Output file systems
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Output file streams have a type: std::ofstream
\end_layout

\begin_layout Itemize
a way to write data to a file.
\end_layout

\begin_deeper
\begin_layout Itemize
use the << insertion operator to send to the file
\end_layout

\begin_layout Itemize
There are some methods for std::ofstream
\end_layout

\begin_layout Itemize
Basis
\end_layout

\begin_deeper
\begin_layout Itemize
is_open()
\end_layout

\begin_layout Itemize
open()
\end_layout

\begin_layout Itemize
close()
\end_layout

\begin_layout Itemize
fail()
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

  /// associating file on construction
\end_layout

\begin_layout Plain Layout

  std::ofstream ofs(“hello.txt”)
\end_layout

\begin_layout Plain Layout

  if (ofs.is_open()) {
\end_layout

\begin_layout Plain Layout

    ofs << “Hello CS106L!” << ‘
\backslash
n’;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  ofs.close();
\end_layout

\begin_layout Plain Layout

  ofs << “this will not get written”;
\end_layout

\begin_layout Plain Layout

  ofs.open(“hello.txt”);
\end_layout

\begin_layout Plain Layout

  ofs << “this will though! It’s open again”;
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Section
Containers
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Containers
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
An object that allows us to collect other objects together and interact
 with them in some way.
\end_layout

\begin_deeper
\begin_layout Itemize
vectors, stacks, or queues
\end_layout

\end_deeper
\begin_layout Itemize
Why?
\end_layout

\begin_deeper
\begin_layout Itemize
Organization: Related data can be packaged together!
\end_layout

\begin_layout Itemize
Standardization: Common features are expected and implemented
\end_layout

\begin_layout Itemize
Abstraction: Complex ideas made easier to utilize by clients
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Containers in STL
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\end_body
\end_document
